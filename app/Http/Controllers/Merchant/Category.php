<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spf631e6) { $sp079e8f = $spf631e6->post('current_page', 1); $sp08a323 = $spf631e6->post('per_page', 20); $spe8afa9 = $this->authQuery($spf631e6, \App\Category::class); $sp33e19c = $spf631e6->post('search', false); $spdb13aa = $spf631e6->post('val', false); if ($sp33e19c && $spdb13aa) { if ($sp33e19c == 'simple') { return Response::success($spe8afa9->get(array('id', 'name'))); } elseif ($sp33e19c == 'id') { $spe8afa9->where('id', $spdb13aa); } else { $spe8afa9->where($sp33e19c, 'like', '%' . $spdb13aa . '%'); } } $spc4af22 = $spf631e6->post('enabled'); if (strlen($spc4af22)) { $spe8afa9->whereIn('enabled', explode(',', $spc4af22)); } $sp3562f5 = $spe8afa9->withCount('products')->orderBy('sort')->paginate($sp08a323, array('*'), 'page', $sp079e8f); foreach ($sp3562f5->items() as $spcf070f) { $spcf070f->setAppends(array('url')); } return Response::success($sp3562f5); } function sort(Request $spf631e6) { $spcbbf66 = (int) $spf631e6->post('id', -1); if (!$spcbbf66) { return Response::forbidden(); } $spcf070f = $this->authQuery($spf631e6, \App\Category::class)->findOrFail($spcbbf66); $spcf070f->sort = (int) $spf631e6->post('sort', 1000); $spcf070f->save(); return Response::success(); } function edit(Request $spf631e6) { $spcbbf66 = (int) $spf631e6->post('id'); $sp5cab35 = $spf631e6->post('name'); $spc4af22 = (int) $spf631e6->post('enabled'); $sp3bef7a = $spf631e6->post('sort'); $sp3bef7a = $sp3bef7a === NULL ? 1000 : (int) $sp3bef7a; if (System::_getInt('filter_words_open') === 1) { $spe775f1 = explode('|', System::_get('filter_words')); if (($sp567373 = Helper::filterWords($sp5cab35, $spe775f1)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp567373); } } if ($sp3bef7a < 0 || $sp3bef7a > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $spc5d82e = $spf631e6->post('password'); $spdc5b00 = $spf631e6->post('password_open') === 'true'; $spcf070f = $this->authQuery($spf631e6, \App\Category::class)->find($spcbbf66); if (!$spcf070f) { $spcf070f = new \App\Category(); $spcf070f->user_id = $this->getUserIdOrFail($spf631e6); } $spcf070f->name = $sp5cab35; $spcf070f->sort = $sp3bef7a; $spcf070f->password = $spc5d82e; $spcf070f->password_open = $spdc5b00; $spcf070f->enabled = $spc4af22; $spcf070f->saveOrFail(); return Response::success(); } function enable(Request $spf631e6) { $sp398578 = $spf631e6->post('ids', ''); if (strlen($sp398578) < 1) { return Response::forbidden(); } $spc4af22 = (int) $spf631e6->post('enabled'); $this->authQuery($spf631e6, \App\Category::class)->whereIn('id', explode(',', $sp398578))->update(array('enabled' => $spc4af22)); return Response::success(); } function delete(Request $spf631e6) { $sp398578 = $spf631e6->post('ids', ''); if (strlen($sp398578) < 1) { return Response::forbidden(); } $this->authQuery($spf631e6, \App\Category::class)->whereIn('id', explode(',', $sp398578))->delete(); return Response::success(); } }