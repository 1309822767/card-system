<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp6a5e99) { $spcbdc33 = $sp6a5e99->post('current_page', 1); $spb4a524 = $sp6a5e99->post('per_page', 20); $sp7a245d = $this->authQuery($sp6a5e99, \App\Category::class); $sp1f1bef = $sp6a5e99->post('search', false); $sp694818 = $sp6a5e99->post('val', false); if ($sp1f1bef && $sp694818) { if ($sp1f1bef == 'simple') { return Response::success($sp7a245d->get(array('id', 'name'))); } elseif ($sp1f1bef == 'id') { $sp7a245d->where('id', $sp694818); } else { $sp7a245d->where($sp1f1bef, 'like', '%' . $sp694818 . '%'); } } $spcd92c8 = $sp6a5e99->post('enabled'); if (strlen($spcd92c8)) { $sp7a245d->whereIn('enabled', explode(',', $spcd92c8)); } $sp00e9d2 = $sp7a245d->withCount('products')->orderBy('sort')->paginate($spb4a524, array('*'), 'page', $spcbdc33); foreach ($sp00e9d2->items() as $sp6643b9) { $sp6643b9->setAppends(array('url')); } return Response::success($sp00e9d2); } function sort(Request $sp6a5e99) { $this->validate($sp6a5e99, array('id' => 'required|integer')); $sp6643b9 = $this->authQuery($sp6a5e99, \App\Category::class)->findOrFail($sp6a5e99->post('id')); $sp6643b9->sort = (int) $sp6a5e99->post('sort', 1000); $sp6643b9->save(); return Response::success(); } function edit(Request $sp6a5e99) { $this->validate($sp6a5e99, array('name' => 'required|string|max:128')); $sp535158 = $sp6a5e99->post('name'); $spcd92c8 = (int) $sp6a5e99->post('enabled'); $spb61394 = $sp6a5e99->post('sort'); $spb61394 = $spb61394 === NULL ? 1000 : (int) $spb61394; if (System::_getInt('filter_words_open') === 1) { $spefca14 = explode('|', System::_get('filter_words')); if (($sp6f1294 = Helper::filterWords($sp535158, $spefca14)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp6f1294); } } if ($spb61394 < 0 || $spb61394 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp6d6784 = $sp6a5e99->post('password'); $sp19346c = $sp6a5e99->post('password_open') === 'true'; if ((int) $sp6a5e99->post('id')) { $sp6643b9 = $this->authQuery($sp6a5e99, \App\Category::class)->findOrFail($sp6a5e99->post('id')); } else { $sp6643b9 = new \App\Category(); $sp6643b9->user_id = $this->getUserIdOrFail($sp6a5e99); } $sp6643b9->name = $sp535158; $sp6643b9->sort = $spb61394; $sp6643b9->password = $sp6d6784; $sp6643b9->password_open = $sp19346c; $sp6643b9->enabled = $spcd92c8; $sp6643b9->saveOrFail(); return Response::success(); } function enable(Request $sp6a5e99) { $this->validate($sp6a5e99, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spe7e110 = $sp6a5e99->post('ids', ''); $spcd92c8 = (int) $sp6a5e99->post('enabled'); $this->authQuery($sp6a5e99, \App\Category::class)->whereIn('id', explode(',', $spe7e110))->update(array('enabled' => $spcd92c8)); return Response::success(); } function delete(Request $sp6a5e99) { $this->validate($sp6a5e99, array('ids' => 'required|string')); $spe7e110 = $sp6a5e99->post('ids', ''); $this->authQuery($sp6a5e99, \App\Category::class)->whereIn('id', explode(',', $spe7e110))->delete(); return Response::success(); } }