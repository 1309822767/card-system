<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp6a5e99, $spbac808 = false, $spc01267 = false, $spf28476 = false) { $sp7a245d = $this->authQuery($sp6a5e99, \App\Card::class)->with(array('product' => function ($sp7a245d) { $sp7a245d->select(array('id', 'name')); })); $sp1f1bef = $sp6a5e99->input('search', false); $sp694818 = $sp6a5e99->input('val', false); if ($sp1f1bef && $sp694818) { if ($sp1f1bef == 'id') { $sp7a245d->where('id', $sp694818); } else { $sp7a245d->where($sp1f1bef, 'like', '%' . $sp694818 . '%'); } } $sp0e6d39 = (int) $sp6a5e99->input('category_id'); $spcf7e6d = $sp6a5e99->input('product_id', -1); if ($sp0e6d39 > 0) { if ($spcf7e6d > 0) { $sp7a245d->where('product_id', $spcf7e6d); } else { $sp7a245d->whereHas('product', function ($sp7a245d) use($sp0e6d39) { $sp7a245d->where('category_id', $sp0e6d39); }); } } $spf9795c = $sp6a5e99->input('status'); if (strlen($spf9795c)) { $sp7a245d->whereIn('status', explode(',', $spf9795c)); } $spfd3d73 = (int) $sp6a5e99->input('onlyCanSell'); if ($spfd3d73) { $sp7a245d->whereRaw('`count_all`>`count_sold`'); } $sp8f02bb = $sp6a5e99->input('type'); if (strlen($sp8f02bb)) { $sp7a245d->whereIn('type', explode(',', $sp8f02bb)); } $sp74c153 = $sp6a5e99->input('trashed') === 'true'; if ($sp74c153) { $sp7a245d->onlyTrashed(); } if ($spc01267 === true) { if ($sp74c153) { $sp7a245d->forceDelete(); } else { \App\Card::_trash($sp7a245d); } return Response::success(); } else { if ($sp74c153 && $spf28476 === true) { \App\Card::_restore($sp7a245d); return Response::success(); } else { $sp7a245d->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($spbac808 === true) { $sp268ccb = ''; $sp7a245d->chunk(100, function ($sp3ae78c) use(&$sp268ccb) { foreach ($sp3ae78c as $spb26e8d) { $sp268ccb .= $spb26e8d->card . '
'; } }); $spf16b4e = 'export_cards_' . $this->getUserIdOrFail($sp6a5e99) . '_' . date('YmdHis') . '.txt'; $sp43c518 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spf16b4e), 'Content-Length' => strlen($sp268ccb)); return response()->make($sp268ccb, 200, $sp43c518); } $spcbdc33 = $sp6a5e99->input('current_page', 1); $spb4a524 = $sp6a5e99->input('per_page', 20); $sp00e9d2 = $sp7a245d->paginate($spb4a524, array('*'), 'page', $spcbdc33); return Response::success($sp00e9d2); } } } function export(Request $sp6a5e99) { return self::get($sp6a5e99, true); } function trash(Request $sp6a5e99) { $this->validate($sp6a5e99, array('ids' => 'required|string')); $spe7e110 = $sp6a5e99->post('ids'); $sp7a245d = $this->authQuery($sp6a5e99, \App\Card::class)->whereIn('id', explode(',', $spe7e110)); \App\Card::_trash($sp7a245d); return Response::success(); } function restoreTrashed(Request $sp6a5e99) { $this->validate($sp6a5e99, array('ids' => 'required|string')); $spe7e110 = $sp6a5e99->post('ids'); $sp7a245d = $this->authQuery($sp6a5e99, \App\Card::class)->whereIn('id', explode(',', $spe7e110)); \App\Card::_restore($sp7a245d); return Response::success(); } function deleteTrashed(Request $sp6a5e99) { $this->validate($sp6a5e99, array('ids' => 'required|string')); $spe7e110 = $sp6a5e99->post('ids'); $this->authQuery($sp6a5e99, \App\Card::class)->whereIn('id', explode(',', $spe7e110))->forceDelete(); return Response::success(); } function deleteAll(Request $sp6a5e99) { return $this->get($sp6a5e99, false, true); } function restoreAll(Request $sp6a5e99) { return $this->get($sp6a5e99, false, false, true); } function add(Request $sp6a5e99) { $spcf7e6d = (int) $sp6a5e99->post('product_id'); $sp3ae78c = $sp6a5e99->post('card'); $sp8f02bb = (int) $sp6a5e99->post('type', \App\Card::TYPE_ONETIME); $spf0cff1 = $sp6a5e99->post('is_check') === 'true'; if (str_contains($sp3ae78c, '<') || str_contains($sp3ae78c, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } if (\App\Card::where('user_id', \Auth::id())->where('status', \App\Card::STATUS_NORMAL)->count() > 10000) { return Response::fail('您的库存卡密已经超过10000张，本次添加失败'); } $sp9f2e5e = $this->getUserIdOrFail($sp6a5e99); $spf55f55 = $this->authQuery($sp6a5e99, \App\Product::class)->where('id', $spcf7e6d); $spf55f55->firstOrFail(array('id')); if ($sp8f02bb === \App\Card::TYPE_REPEAT) { if ($spf0cff1) { if (\App\Card::where('product_id', $spcf7e6d)->where('card', $sp3ae78c)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spb26e8d = new \App\Card(array('user_id' => $sp9f2e5e, 'product_id' => $spcf7e6d, 'card' => $sp3ae78c, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp6a5e99->post('count_all', 1))); if ($spb26e8d->count_all < 1 || $spb26e8d->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($spf55f55, $spb26e8d) { $spb26e8d->saveOrFail(); $spdbee16 = $spf55f55->lockForUpdate()->firstOrFail(); $spdbee16->buy_max = 1; $spdbee16->count_all += $spb26e8d->count_all; $spdbee16->saveOrFail(); return Response::success(); }); } else { $sp3567f3 = explode('
', $sp3ae78c); $sp549b2e = count($sp3567f3); $sp4106e5 = 50; if ($sp549b2e > $sp4106e5) { return Response::fail('每次添加不能超过 ' . $sp4106e5 . ' 张'); } $spdfc46f = array(); if ($spf0cff1) { $spd3f05f = \App\Card::where('user_id', $sp9f2e5e)->where('product_id', $spcf7e6d)->get(array('card'))->all(); foreach ($spd3f05f as $spb70316) { $spdfc46f[] = $spb70316['card']; } } $speb9bd6 = array(); $sp6c0815 = 0; for ($spf69b52 = 0; $spf69b52 < $sp549b2e; $spf69b52++) { $spb26e8d = trim($sp3567f3[$spf69b52]); if (strlen($spb26e8d) < 1) { continue; } if (strlen($spb26e8d) > 100) { return Response::fail('第 ' . $spf69b52 . ' 张卡密 ' . $spb26e8d . ' 长度错误<br>卡密最大长度为100'); } if ($spf0cff1) { if (in_array($spb26e8d, $spdfc46f)) { continue; } $spdfc46f[] = $spb26e8d; } $speb9bd6[] = array('user_id' => $sp9f2e5e, 'product_id' => $spcf7e6d, 'card' => $spb26e8d, 'type' => \App\Card::TYPE_ONETIME); $sp6c0815++; } if ($sp6c0815 === 0) { return Response::success(); } return DB::transaction(function () use($spf55f55, $speb9bd6, $sp6c0815) { \App\Card::insert($speb9bd6); $spdbee16 = $spf55f55->lockForUpdate()->firstOrFail(); $spdbee16->count_all += $sp6c0815; $spdbee16->saveOrFail(); return Response::success(); }); } } function edit(Request $sp6a5e99) { $sp5d3f49 = (int) $sp6a5e99->post('id'); $sp12e36c = $sp6a5e99->post('card'); $sp8f02bb = (int) $sp6a5e99->post('type', \App\Card::TYPE_ONETIME); $spb26e8d = $this->authQuery($sp6a5e99, \App\Card::class)->findOrFail($sp5d3f49); if ($spb26e8d) { $spb26e8d->card = $sp12e36c; $spb26e8d->type = $sp8f02bb; $sp11ba97 = (int) $sp6a5e99->post('count_all', 1); $spf55f55 = $spb26e8d->product(); if ($sp8f02bb === \App\Card::TYPE_REPEAT) { return DB::transaction(function () use($spf55f55, $spb26e8d, $sp11ba97) { $spb26e8d = \App\Card::where('id', $spb26e8d->id)->lockForUpdate()->firstOrFail(); if ($sp11ba97 < $spb26e8d->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($sp11ba97 < 1 || $sp11ba97 > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spdbee16 = $spf55f55->lockForUpdate()->firstOrFail(); $spdbee16->buy_max = 1; $spdbee16->count_all -= $spb26e8d->count_all; $spdbee16->count_all += $sp11ba97; $spdbee16->saveOrFail(); $spb26e8d->count_all = $sp11ba97; $spb26e8d->saveOrFail(); return Response::success(); }); } else { return DB::transaction(function () use($spf55f55, $spb26e8d, $sp11ba97) { $spb26e8d = \App\Card::where('id', $spb26e8d->id)->lockForUpdate()->firstOrFail(); $spdbee16 = $spf55f55->lockForUpdate()->firstOrFail(); $spdbee16->count_all -= $spb26e8d->count_all; $spdbee16->count_all += 1; $spdbee16->saveOrFail(); $spb26e8d->count_all = 1; $spb26e8d->saveOrFail(); return Response::success(); }); } } return Response::success(); } }