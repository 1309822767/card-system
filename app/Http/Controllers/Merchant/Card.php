<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $spf631e6, $spef16ed = false, $spd3d083 = false, $spc8d8c3 = false) { $spe8afa9 = $this->authQuery($spf631e6, \App\Card::class)->with(array('product' => function ($spe8afa9) { $spe8afa9->select(array('id', 'name')); })); $sp33e19c = $spf631e6->post('search', false); $spdb13aa = $spf631e6->post('val', false); if ($sp33e19c && $spdb13aa) { if ($sp33e19c == 'id') { $spe8afa9->where('id', $spdb13aa); } else { $spe8afa9->where($sp33e19c, 'like', '%' . $spdb13aa . '%'); } } $sp23531a = (int) $spf631e6->post('category_id'); $spa20daf = $spf631e6->post('product_id', -1); if ($sp23531a > 0) { if ($spa20daf > 0) { $spe8afa9->where('product_id', $spa20daf); } else { $spe8afa9->whereHas('product', function ($spe8afa9) use($sp23531a) { $spe8afa9->where('category_id', $sp23531a); }); } } $sp73477e = $spf631e6->post('status'); if (strlen($sp73477e)) { $spe8afa9->whereIn('status', explode(',', $sp73477e)); } $spc55738 = (int) $spf631e6->post('onlyCanSell'); if ($spc55738) { $spe8afa9->whereRaw('`count_all`>`count_sold`'); } $sp4c5fa8 = $spf631e6->post('type'); if (strlen($sp4c5fa8)) { $spe8afa9->whereIn('type', explode(',', $sp4c5fa8)); } $sp97cf21 = $spf631e6->post('trashed') === 'true'; if ($sp97cf21) { $spe8afa9->onlyTrashed(); } $spe8afa9->orderByRaw('product_id,type,status'); if ($spef16ed === true) { $sp119673 = ''; $spe8afa9->chunk(100, function ($sp712040) use(&$sp119673) { foreach ($sp712040 as $sp29cfbd) { $sp119673 .= $sp29cfbd->card . '
'; } }); $sp522c55 = 'export_cards_' . $this->getUserIdOrFail($spf631e6) . '_' . date('YmdHis') . '.txt'; $sp136037 = 'card_export/' . $sp522c55; $sp35934a = System::_get('storage_driver'); try { if (!Storage::disk($sp35934a)->put($sp136037, $sp119673)) { return Response::fail('文件生成失败'); } } catch (\Exception $sp019ea9) { \Log::error('Card.export Exception: ' . $sp019ea9->getMessage()); if (config('app.debug')) { return Response::fail($sp019ea9->getMessage()); } else { return Response::fail('生成文件失败, 内部错误, 请联系客服'); } } $spc59422 = \App\File::insertGetId(array('user_id' => $this->getUserIdOrFail($spf631e6), 'driver' => $sp35934a, 'path' => $sp136037, 'url' => Storage::disk($sp35934a)->url($sp136037))); if ($spc59422 <= 0) { return Response::fail('数据库繁忙，插入文件记录失败'); } return Response::success($spc59422); } else { if ($spd3d083 === true) { if ($sp97cf21) { $spe8afa9->forceDelete(); } else { $spe8afa9->delete(); } return Response::success(); } else { if ($sp97cf21 && $spc8d8c3 === true) { $spe8afa9->restore(); return Response::success(); } else { $sp079e8f = $spf631e6->post('current_page', 1); $sp08a323 = $spf631e6->post('per_page', 20); $sp3562f5 = $spe8afa9->paginate($sp08a323, array('*'), 'page', $sp079e8f); return Response::success($sp3562f5); } } } } function export(Request $spf631e6) { return self::get($spf631e6, true); } function export_download($spc59422) { $sp90b6b6 = \App\File::findOrFail($spc59422); $sp5b5487 = Auth::getUser(); if ($sp5b5487->role !== 'admin' && $sp5b5487->id !== $sp90b6b6->user_id) { $sp119673 = 'Access Denied'; $sp6da271 = 'your_are_sb.txt'; } else { $sp35934a = System::_get('storage_driver'); $sp119673 = Storage::disk($sp35934a)->get($sp90b6b6->path); $sp6da271 = pathinfo($sp90b6b6->path, PATHINFO_BASENAME); Storage::disk($sp35934a)->delete($sp90b6b6->path); try { $sp90b6b6->delete(); } catch (\Exception $sp019ea9) { } } $sp79f0c2 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp6da271), 'Content-Length' => strlen($sp119673)); return response()->make($sp119673, 200, $sp79f0c2); } function trash(Request $spf631e6) { $sp398578 = $spf631e6->post('ids', ''); if (strlen($sp398578) < 1) { return Response::forbidden(); } $this->authQuery($spf631e6, \App\Card::class)->whereIn('id', explode(',', $sp398578))->delete(); return Response::success(); } function deleteTrashed(Request $spf631e6) { $sp398578 = $spf631e6->post('ids', ''); if (strlen($sp398578) < 1) { return Response::forbidden(); } $this->authQuery($spf631e6, \App\Card::class)->whereIn('id', explode(',', $sp398578))->forceDelete(); return Response::success(); } function deleteAll(Request $spf631e6) { return $this->get($spf631e6, false, true); } function restoreTrashed(Request $spf631e6) { $sp398578 = $spf631e6->post('ids', ''); if (strlen($sp398578) < 1) { return Response::forbidden(); } $spe8afa9 = $this->authQuery($spf631e6, \App\Card::class); $spe8afa9->whereIn('id', explode(',', $sp398578))->restore(); return Response::success(); } function restoreAll(Request $spf631e6) { return $this->get($spf631e6, false, false, true); } function add(Request $spf631e6) { $spa20daf = (int) $spf631e6->post('product_id'); $sp712040 = $spf631e6->post('card'); $sp73477e = \App\Card::STATUS_NORMAL; $sp4c5fa8 = (int) $spf631e6->post('type', \App\Card::TYPE_ONETIME); $sp09343a = $spf631e6->post('is_check') === 'true'; if (str_contains($sp712040, '<') || str_contains($sp712040, '>')) { return Response::fail('卡密不能用 < 或 > 分割'); } if (\App\Card::where('user_id', \Auth::id())->where('status', \App\Card::STATUS_NORMAL)->count() > 10000) { return Response::fail('您的库存卡密已经超过10000张，本次添加失败'); } $sp69288e = $this->authQuery($spf631e6, \App\Product::class)->findOrFail($spa20daf); if ($sp4c5fa8 === \App\Card::TYPE_REPEAT) { if ($sp09343a) { if (\App\Card::where('product_id', $spa20daf)->where('card', $sp712040)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp69288e->buy_max = 1; $sp69288e->saveOrFail(); $sp29cfbd = new \App\Card(); $sp29cfbd->user_id = $this->getUserIdOrFail($spf631e6); $sp29cfbd->product_id = $spa20daf; $sp29cfbd->card = $sp712040; $sp29cfbd->type = $sp4c5fa8; $sp29cfbd->status = $sp73477e; $sp29cfbd->count_sold = 0; $sp29cfbd->count_all = (int) $spf631e6->post('count_all', 1); if ($sp29cfbd->count_all < 1 || $sp29cfbd->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp29cfbd->saveOrFail(); } else { $spf3d7a8 = explode('
', $sp712040); $spec6302 = count($spf3d7a8); $sp11754f = 50; if ($spec6302 > $sp11754f) { return Response::fail('每次添加不能超过 ' . $sp11754f . ' 张'); } $sp6d882e = array(); $sp119673 = ''; for ($sp218d20 = 0; $sp218d20 < $spec6302; $sp218d20++) { $sp29cfbd = trim($spf3d7a8[$sp218d20]); if (strlen($sp29cfbd) < 1) { continue; } if (strlen($sp29cfbd) > 100) { return Response::fail('第 ' . $sp218d20 . ' 张卡密 ' . $sp29cfbd . ' 长度错误<br>卡密最大长度为100'); } if ($sp09343a) { if (in_array($sp29cfbd, $sp6d882e)) { continue; } $sp6d882e[] = $sp29cfbd; } if ($sp119673 === '') { $sp119673 .= $sp29cfbd; } else { $sp119673 .= '<' . $sp29cfbd; } } if ($sp119673 === '') { return Response::fail('请输入合法的卡密'); } try { \App\Card::add_cards($this->getUserIdOrFail($spf631e6), $spa20daf, $sp4c5fa8, $sp73477e, $sp119673, false); } catch (\Exception $sp019ea9) { \Log::error('add_cards, function fatal error: ', array('exception' => $sp019ea9)); return Response::fail($sp019ea9->getMessage()); } } return Response::success(); } function edit(Request $spf631e6) { $spcbbf66 = (int) $spf631e6->post('id'); $sp29cfbd = $spf631e6->post('card'); $sp4c5fa8 = (int) $spf631e6->post('type', \App\Card::TYPE_ONETIME); $spb91d1b = $this->authQuery($spf631e6, \App\Card::class)->findOrFail($spcbbf66); if ($spb91d1b) { $spb91d1b->card = $sp29cfbd; $spb91d1b->type = $sp4c5fa8; if ($sp4c5fa8 === \App\Card::TYPE_REPEAT) { $sp69288e = $spb91d1b->product; $sp69288e->buy_max = 1; $sp69288e->saveOrFail(); $spb91d1b->count_all = (int) $spf631e6->post('count_all', 1); } else { $spb91d1b->count_all = 1; } $spb91d1b->saveOrFail(); } return Response::success(); } }