<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp6a5e99) { $sp7a245d = $this->authQuery($sp6a5e99, \App\Order::class); $sp0e6d39 = (int) $sp6a5e99->post('category_id'); $spcf7e6d = (int) $sp6a5e99->post('product_id'); $sp7b862d = (int) $sp6a5e99->post('profit'); $spd23494 = $sp0e6d39 === \App\Product::ID_API || $spcf7e6d === \App\Product::ID_API; $sp1f1bef = $sp6a5e99->post('search', false); $sp694818 = $sp6a5e99->post('val', false); if ($sp1f1bef && $sp694818) { if ($sp1f1bef == 'id' || $sp1f1bef == 'order_no' || $sp1f1bef === 'pay_trade_no' || $sp1f1bef === 'api_out_no') { $sp7a245d->where($sp1f1bef, $sp694818); } else { $sp7a245d->where($sp1f1bef, 'like', '%' . $sp694818 . '%'); } } if ($sp0e6d39 > 0) { if ($spcf7e6d > 0) { $sp7a245d->where('product_id', $spcf7e6d); } else { $sp7a245d->whereHas('product', function ($sp7a245d) use($sp0e6d39) { $sp7a245d->where('category_id', $sp0e6d39); }); } } $spa78f36 = (int) $sp6a5e99->post('recent', 0); if ($spa78f36) { $spa5a0aa = (new Carbon())->addDay(-$spa78f36); $sp7a245d->where('paid_at', '>=', $spa5a0aa); } else { $spa5a0aa = $sp6a5e99->post('start_at', false); if (strlen($spa5a0aa)) { $sp7a245d->where('paid_at', '>=', $spa5a0aa . ' 00:00:00'); } $spe7781b = $sp6a5e99->post('end_at', false); if (strlen($spe7781b)) { $sp7a245d->where('paid_at', '<=', $spe7781b . ' 23:59:59'); } } if ($sp7b862d) { $sp7a245d->where('status', \App\Order::STATUS_SUCCESS); $sp57eed5 = clone $sp7a245d; $sp8ddb77 = $sp57eed5->selectRaw('SUM(`income`) as income, SUM(`income`-`cost`) as profit')->first(); } else { $spf9795c = $sp6a5e99->post('status'); if (strlen($spf9795c)) { $sp7a245d->whereIn('status', explode(',', $spf9795c)); } else { $sp7a245d->where('status', '!=', \App\Order::STATUS_UNPAY); } if ($spd23494) { $sp7a245d->where('product_id', \App\Product::ID_API); } else { $sp7a245d->where('product_id', '>', 0); $sp7a245d->with(array('product' => function (Relation $sp7a245d) { $sp7a245d->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp7a245d) { $sp7a245d->select(array('id', 'card')); })); } } $sp7a245d->with(array('pay' => function (Relation $sp7a245d) { $sp7a245d->select(array('id', 'name')); })); $spcbdc33 = $sp6a5e99->post('current_page', 1); $spb4a524 = $sp6a5e99->post('per_page', 20); $sp00e9d2 = $sp7a245d->orderBy('id', 'DESC')->paginate($spb4a524, array('*'), 'page', $spcbdc33); if ($sp7b862d) { $sp00e9d2 = $sp00e9d2->toArray(); $sp00e9d2['profit_sum'] = $sp8ddb77; } return Response::success($sp00e9d2); } function stat(Request $sp6a5e99) { $sp73a9ec = (int) $sp6a5e99->input('day', 7); $sp00e9d2 = $this->authQuery($sp6a5e99, \App\Order::class)->where(function ($sp7a245d) { $sp7a245d->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$sp73a9ec + 1))->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`income`) as "sum"')->get()->toArray(); $sp6f1294 = array(); foreach ($sp00e9d2 as $sp1b8ac8) { $sp6f1294[$sp1b8ac8['date']] = array((int) $sp1b8ac8['count'], (int) $sp1b8ac8['sum']); } return Response::success($sp6f1294); } function info(Request $sp6a5e99) { $this->validate($sp6a5e99, array('id' => 'required|integer')); $sp5d3f49 = $sp6a5e99->post('id'); $sp61541f = $this->authQuery($sp6a5e99, \App\Order::class)->with(array('pay' => function (Relation $sp7a245d) { $sp7a245d->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp7a245d) { $sp7a245d->select(array('id', 'card')); }))->findOrFail($sp5d3f49); $sp61541f->addHidden(array('system_fee')); return Response::success($sp61541f); } function remark(Request $sp6a5e99) { $this->validate($sp6a5e99, array('id' => 'required|integer', 'remark' => 'required|string')); $sp5d3f49 = $sp6a5e99->post('id'); $sp61541f = $this->authQuery($sp6a5e99, \App\Order::class)->findOrFail($sp5d3f49); $sp61541f->remark = $sp6a5e99->post('remark'); $sp61541f->save(); return Response::success(); } function ship(Request $sp6a5e99) { $this->validate($sp6a5e99, array('id' => 'required|integer')); $sp61541f = $this->authQuery($sp6a5e99, \App\Order::class)->findOrFail($sp6a5e99->post('id')); if ($sp61541f->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } $sp24db61 = null; $sp3567f3 = array(); if (FundHelper::orderSuccess($sp61541f->id, function () use(&$sp61541f, &$sp24db61, &$sp3567f3) { $sp61541f = \App\Order::where('id', $sp61541f->id)->lockForUpdate()->firstOrFail(); if ($sp61541f->cards && count($sp61541f->cards)) { $sp24db61 = '该订单已经发货，无需再次发货'; return false; } $sp3ae78c = \App\Card::where('product_id', $sp61541f->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp61541f->count)->lockForUpdate()->get(); if (count($sp3ae78c) !== $sp61541f->count) { $sp24db61 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp61541f->status = \App\Order::STATUS_SUCCESS; $sp61541f->saveOrFail(); $spd784ca = array(); foreach ($sp3ae78c as $spb26e8d) { $spd784ca[] = $spb26e8d->id; $sp3567f3[] = $spb26e8d->card; } $sp61541f->cards()->attach($spd784ca); \App\Card::whereIn('id', $spd784ca)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); return FundHelper::ACTION_CONTINUE; } })) { if (filter_var($sp61541f->email, FILTER_VALIDATE_EMAIL)) { $sp6944b2 = join('<br>', $sp3567f3); try { Mail::to($sp61541f->email)->Queue(new OrderShipped($sp61541f, '订单#' . $sp61541f->order_no . '&nbsp;已支付，卡号列表：', $sp6944b2)); $sp61541f->email_sent = true; $sp61541f->saveOrFail(); } catch (\Throwable $spbcc446) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('Order.ship error, order_no:' . $sp61541f->order_no . ', email:' . $sp61541f->email . ', cards:' . $sp6944b2 . ', Exception:' . $spbcc446->getMessage()); \App\Library\LogHelper::setLogFile('card'); } } $sp61541f->addHidden(array('system_fee')); $sp61541f = $sp61541f->toArray(); $sp61541f['cards'] = array_map(function ($sp1b8ac8) { return array('card' => $sp1b8ac8); }, $sp3567f3); return Response::success($sp61541f); } else { return Response::fail($sp24db61 ?? '数据库繁忙, 请联系客服'); } } }