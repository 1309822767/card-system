<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spf631e6) { $spe8afa9 = $this->authQuery($spf631e6, \App\Order::class); $sp23531a = (int) $spf631e6->post('category_id'); $spa20daf = (int) $spf631e6->post('product_id'); $sp447b97 = (int) $spf631e6->post('profit'); $sp08c53c = $sp23531a === \App\Product::ID_API || $spa20daf === \App\Product::ID_API; $sp33e19c = $spf631e6->post('search', false); $spdb13aa = $spf631e6->post('val', false); if ($sp33e19c && $spdb13aa) { if ($sp33e19c == 'id' || $sp33e19c == 'order_no' || $sp33e19c === 'pay_trade_no' || $sp33e19c === 'api_out_no') { $spe8afa9->where($sp33e19c, $spdb13aa); } else { $spe8afa9->where($sp33e19c, 'like', '%' . $spdb13aa . '%'); } } if ($sp23531a > 0) { if ($spa20daf > 0) { $spe8afa9->where('product_id', $spa20daf); } else { $spe8afa9->whereHas('product', function ($spe8afa9) use($sp23531a) { $spe8afa9->where('category_id', $sp23531a); }); } } $sp3fbcba = (int) $spf631e6->post('recent', 0); if ($sp3fbcba) { $spd43b07 = (new Carbon())->addDay(-$sp3fbcba); $spe8afa9->where('paid_at', '>=', $spd43b07); } else { $spd43b07 = $spf631e6->post('start_at', false); if (strlen($spd43b07)) { $spe8afa9->where('paid_at', '>=', $spd43b07 . ' 00:00:00'); } $sp4d365e = $spf631e6->post('end_at', false); if (strlen($sp4d365e)) { $spe8afa9->where('paid_at', '<=', $sp4d365e . ' 23:59:59'); } } if ($sp447b97) { $spe8afa9->where('status', \App\Order::STATUS_SUCCESS); $sp506f3d = clone $spe8afa9; $sp7f3d9b = $sp506f3d->selectRaw('SUM(`income`) as income, SUM(`income`-`cost`) as profit')->first(); } else { $sp73477e = $spf631e6->post('status'); if (strlen($sp73477e)) { $spe8afa9->whereIn('status', explode(',', $sp73477e)); } else { $spe8afa9->where('status', '!=', \App\Order::STATUS_UNPAY); } if ($sp08c53c) { $spe8afa9->where('product_id', \App\Product::ID_API); } else { $spe8afa9->where('product_id', '>', 0); $spe8afa9->with(array('product' => function (Relation $spe8afa9) { $spe8afa9->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spe8afa9) { $spe8afa9->select(array('id', 'card')); })); } } $spe8afa9->with(array('pay' => function (Relation $spe8afa9) { $spe8afa9->select(array('id', 'name')); })); $sp079e8f = $spf631e6->post('current_page', 1); $sp08a323 = $spf631e6->post('per_page', 20); $sp3562f5 = $spe8afa9->orderBy('id', 'DESC')->paginate($sp08a323, array('*'), 'page', $sp079e8f); if (!$this->isAdmin()) { foreach ($sp3562f5->items() as $sp09599a) { $sp09599a->addHidden(array('system_fee')); } } if ($sp447b97) { $sp3562f5 = $sp3562f5->toArray(); $sp3562f5['profit_sum'] = $sp7f3d9b; } return Response::success($sp3562f5); } function stat(Request $spf631e6) { $spe6a0a5 = (int) $spf631e6->input('day', 7); $sp3562f5 = $this->authQuery($spf631e6, \App\Order::class)->where(function ($spe8afa9) { $spe8afa9->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$spe6a0a5 + 1))->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`income`) as "sum"')->get()->toArray(); $sp567373 = array(); foreach ($sp3562f5 as $spe1403c) { $sp567373[$spe1403c['date']] = array((int) $spe1403c['count'], (int) $spe1403c['sum']); } return Response::success($sp567373); } function info(Request $spf631e6) { $spcbbf66 = (int) $spf631e6->post('id'); if (!$spcbbf66) { return Response::forbidden(); } $sp09599a = $this->authQuery($spf631e6, \App\Order::class)->with(array('pay' => function (Relation $spe8afa9) { $spe8afa9->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spe8afa9) { $spe8afa9->select(array('id', 'card')); }))->findOrFail($spcbbf66); $sp09599a->addHidden(array('system_fee')); return Response::success($sp09599a); } function remark(Request $spf631e6) { $spcbbf66 = (int) $spf631e6->post('id'); if (!$spcbbf66) { return Response::forbidden(); } $sp09599a = $this->authQuery($spf631e6, \App\Order::class)->findOrFail($spcbbf66); $sp09599a->remark = $spf631e6->post('remark'); $sp09599a->save(); return Response::success(); } function ship(Request $spf631e6) { $this->validate($spf631e6, array('id' => 'required|integer')); $sp09599a = $this->authQuery($spf631e6, \App\Order::class)->findOrFail($spf631e6->post('id')); if ($sp09599a->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } $sp296ddc = null; if (FundHelper::orderSuccess($sp09599a, function () use(&$sp09599a, &$sp296ddc) { $sp09599a = \App\Order::where('id', $sp09599a->id)->lockForUpdate()->firstOrFail(); if ($sp09599a->cards && count($sp09599a->cards)) { $sp296ddc = '该订单已经发货，无需再次发货'; return false; } $sp712040 = \App\Card::where('product_id', $sp09599a->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp09599a->count)->lockForUpdate()->get(); if (count($sp712040) !== $sp09599a->count) { $sp296ddc = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp09599a->status = \App\Order::STATUS_SUCCESS; $sp09599a->saveOrFail(); $spe3785f = array(); $sp7fc74d = ''; $spf3d7a8 = array(); foreach ($sp712040 as $sp29cfbd) { $sp7fc74d .= $sp29cfbd->card . '<br>'; $spe3785f[] = $sp29cfbd->id; $spf3d7a8[] = array('card' => $sp29cfbd->card); } $sp09599a->cards()->attach($spe3785f); \App\Card::whereIn('id', $spe3785f)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp5f1152 = '订单#' . $sp09599a->order_no . '&nbsp;已支付，卡号列表：'; $spd34b05 = str_replace('
', '<br>', $sp7fc74d); try { \Mail::to($sp09599a->email)->Queue(new OrderShipped($sp09599a, $sp5f1152, $spd34b05)); $sp09599a->email_sent = true; $sp09599a->saveOrFail(); } catch (\Exception $sp019ea9) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('Order.ship error, order_no:' . $sp09599a->order_no . ', email:' . $sp09599a->email . ', cards:' . $spd34b05 . ', Exception:' . $sp019ea9->getMessage()); \App\Library\LogHelper::setLogFile('card'); } $sp09599a->addHidden(array('system_fee')); $sp09599a = $sp09599a->toArray(); $sp09599a['cards'] = $spf3d7a8; return \App\Order::STATUS_SUCCESS; } })) { if (!$sp296ddc) { return Response::success($sp09599a); } else { return Response::fail($sp296ddc ? $sp296ddc : '未知错误'); } } else { \Log::error('Order.ship error, order_no:' . $sp09599a->order_no); return Response::fail($sp296ddc ? $sp296ddc : '数据库繁忙, 请联系客服'); } } }