<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spf631e6) { $spe8afa9 = $this->authQuery($spf631e6, \App\Product::class)->with(array('category' => function (Relation $spe8afa9) { $spe8afa9->select(array('id', 'name', 'password_open')); }))->with(array('cards' => function (Relation $spe8afa9) { $spe8afa9->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); })); $sp33e19c = $spf631e6->post('search', false); $spdb13aa = $spf631e6->post('val', false); if ($sp33e19c && $spdb13aa) { if ($sp33e19c == 'simple') { return Response::success($spe8afa9->where('category_id', $spdb13aa)->get(array('id', 'name'))); } elseif ($sp33e19c == 'id') { $spe8afa9->where('id', $spdb13aa); } else { $spe8afa9->where($sp33e19c, 'like', '%' . $spdb13aa . '%'); } } $sp23531a = (int) $spf631e6->post('category_id'); if ($sp23531a > 0) { $spe8afa9->where('category_id', $sp23531a); } $spc4af22 = $spf631e6->post('enabled'); if (strlen($spc4af22)) { $spe8afa9->whereIn('enabled', explode(',', $spc4af22)); } $sp079e8f = $spf631e6->post('current_page', 1); $sp08a323 = $spf631e6->post('per_page', 20); $sp3562f5 = $spe8afa9->orderBy('sort')->paginate($sp08a323, array('*'), 'page', $sp079e8f); foreach ($sp3562f5->items() as $sp69288e) { $sp69288e->setAppends(array('count', 'url')); } return Response::success($sp3562f5); } function sort(Request $spf631e6) { $spcbbf66 = (int) $spf631e6->post('id', -1); if (!$spcbbf66) { return Response::forbidden(); } $sp69288e = $this->authQuery($spf631e6, \App\Product::class)->findOrFail($spcbbf66); $sp69288e->sort = (int) $spf631e6->post('sort', 1000); $sp69288e->save(); return Response::success(); } function category_edit(Request $spf631e6) { $spcbbf66 = (int) $spf631e6->post('id'); $sp23531a = (int) $spf631e6->post('category_id'); if (!$spcbbf66 || !$sp23531a) { return Response::forbidden(); } $sp69288e = $this->authQuery($spf631e6, \App\Product::class)->findOrFail($spcbbf66); $sp69288e->category_id = $sp23531a; $sp69288e->save(); return Response::success(); } function edit(Request $spf631e6) { $spcbbf66 = (int) $spf631e6->post('id'); $sp23531a = (int) $spf631e6->post('category_id'); $sp5cab35 = $spf631e6->post('name'); $sp5f9c2f = $spf631e6->post('description'); $sp94075f = $spf631e6->post('instructions'); $sp3bef7a = $spf631e6->post('sort'); $sp3bef7a = $sp3bef7a === NULL ? 1000 : (int) $sp3bef7a; $sp578647 = (int) $spf631e6->post('count_warn', 0); $sp2ff870 = (int) $spf631e6->post('buy_min', 0); $spc85cde = (int) $spf631e6->post('buy_max', 0); $spbc8762 = $spf631e6->post('support_coupon', 0) === 'true'; $spc5d82e = $spf631e6->post('password'); $spdc5b00 = $spf631e6->post('password_open', 0) === 'true'; $sp366d9f = (int) ($spf631e6->post('cost') * 100); $sp902bad = (int) ($spf631e6->post('price') * 100); $sp389e59 = $spf631e6->post('price_whole'); $spc4af22 = (int) $spf631e6->post('enabled'); if (System::_getInt('filter_words_open') === 1) { $spe775f1 = explode('|', System::_get('filter_words')); if (($sp567373 = Helper::filterWords($sp5cab35, $spe775f1)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp567373); } if (($sp567373 = Helper::filterWords($sp5f9c2f, $spe775f1)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp567373); } if (($sp567373 = Helper::filterWords($sp94075f, $spe775f1)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp567373); } } if ($sp2ff870 < 1 || $sp2ff870 > 10000) { return Response::fail('最小购买量不能超过10000'); } if ($spc85cde < 1 || $spc85cde > 10000) { return Response::fail('最大购买量不能超过10000'); } if ($sp578647 < 0 || $sp578647 > 10000000) { return Response::fail('库存预警需要在0-10000000之间'); } if ($sp3bef7a < 0 || $sp3bef7a > 10000000) { return Response::fail('排序需要在0-10000000之间'); } if ($sp366d9f > 1000000000 || $sp902bad > 1000000000) { return Response::fail('商品价格不能超过10000000, 请重新输入'); } if ($sp366d9f < 0 || $sp902bad < 0) { return Response::fail('价格不能为负数'); } $sp69288e = $this->authQuery($spf631e6, \App\Product::class)->find($spcbbf66); if (!$sp69288e) { $sp69288e = new \App\Product(); $sp69288e->count_sold = 0; $sp69288e->user_id = $this->getUserIdOrFail($spf631e6); } else { if (\App\Card::whereProductId($sp69288e->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($sp2ff870 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($spc85cde !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } $sp69288e->category_id = $sp23531a; $sp69288e->name = $sp5cab35; $sp69f6c6 = new AntiXSS(); $sp69288e->description = $sp69f6c6->xss_clean($sp5f9c2f); $sp69288e->instructions = $sp69f6c6->xss_clean($sp94075f); $sp69288e->sort = $sp3bef7a; $sp69288e->buy_min = $sp2ff870; $sp69288e->buy_max = $spc85cde; $sp69288e->count_warn = $sp578647; $sp69288e->support_coupon = $spbc8762; $sp69288e->password = $spc5d82e; $sp69288e->password_open = $spdc5b00; $sp69288e->cost = $sp366d9f; $sp69288e->price = $sp902bad; $sp69288e->price_whole = $sp389e59; $sp69288e->enabled = $spc4af22; $sp69288e->saveOrFail(); return Response::success(); } function enable(Request $spf631e6) { $sp398578 = $spf631e6->post('ids', ''); if (strlen($sp398578) < 1) { return Response::forbidden(); } $spc4af22 = (int) $spf631e6->post('enabled'); $this->authQuery($spf631e6, \App\Product::class)->whereIn('id', explode(',', $sp398578))->update(array('enabled' => $spc4af22)); return Response::success(); } function delete(Request $spf631e6) { $sp398578 = $spf631e6->post('ids', ''); if (strlen($sp398578) < 1) { return Response::forbidden(); } $this->authQuery($spf631e6, \App\Product::class)->whereIn('id', explode(',', $sp398578))->delete(); return Response::success(); } }