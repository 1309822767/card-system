<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp6a5e99) { $sp7a245d = $this->authQuery($sp6a5e99, \App\Product::class)->with(array('category' => function (Relation $sp7a245d) { $sp7a245d->select(array('id', 'name', 'password_open')); })); $sp1f1bef = $sp6a5e99->post('search', false); $sp694818 = $sp6a5e99->post('val', false); if ($sp1f1bef && $sp694818) { if ($sp1f1bef == 'simple') { return Response::success($sp7a245d->where('category_id', $sp694818)->get(array('id', 'name'))); } elseif ($sp1f1bef == 'id') { $sp7a245d->where('id', $sp694818); } elseif ($sp1f1bef == 'category_id') { $sp7a245d->where('category_id', $sp694818); } else { $sp7a245d->where($sp1f1bef, 'like', '%' . $sp694818 . '%'); } } $sp0e6d39 = (int) $sp6a5e99->post('category_id'); if ($sp0e6d39 > 0) { $sp7a245d->where('category_id', $sp0e6d39); } $spcd92c8 = $sp6a5e99->post('enabled'); if (strlen($spcd92c8)) { $sp7a245d->whereIn('enabled', explode(',', $spcd92c8)); } $spcbdc33 = $sp6a5e99->post('current_page', 1); $spb4a524 = $sp6a5e99->post('per_page', 20); $sp00e9d2 = $sp7a245d->orderBy('sort')->paginate($spb4a524, array('*'), 'page', $spcbdc33); foreach ($sp00e9d2->items() as $spdbee16) { $spdbee16->setAppends(array('count', 'url')); } return Response::success($sp00e9d2); } function sort(Request $sp6a5e99) { $this->validate($sp6a5e99, array('id' => 'required|integer')); $spdbee16 = $this->authQuery($sp6a5e99, \App\Product::class)->findOrFail($sp6a5e99->post('id')); $spdbee16->sort = (int) $sp6a5e99->post('sort', 1000); $spdbee16->save(); return Response::success(); } function category_change(Request $sp6a5e99) { $this->validate($sp6a5e99, array('id' => 'required|integer', 'category_id' => 'required|integer')); $sp6643b9 = $this->authQuery($sp6a5e99, \App\Category::class)->findOrFail($sp6a5e99->post('category_id')); $spdbee16 = $this->authQuery($sp6a5e99, \App\Product::class)->findOrFail($sp6a5e99->post('id')); $spdbee16->category_id = $sp6643b9->id; $spdbee16->save(); return Response::success(); } function edit(Request $sp6a5e99) { $this->validate($sp6a5e99, array('id' => 'sometimes|integer', 'category_id' => 'required|integer', 'description' => 'required|string', 'instructions' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp0e6d39 = (int) $sp6a5e99->post('category_id'); if (!$this->authQuery($sp6a5e99, \App\Category::class)->where('id', $sp0e6d39)->exists()) { return Response::fail('商品分类不存在'); } $sp535158 = $sp6a5e99->post('name'); $sp97e2b2 = $sp6a5e99->post('description'); $sp8271f1 = $sp6a5e99->post('instructions'); $sp3a3909 = (int) $sp6a5e99->post('buy_min', 0); $sp63b3eb = (int) $sp6a5e99->post('buy_max', 0); $sp152c6f = (int) round($sp6a5e99->post('cost') * 100); $spcaf990 = (int) round($sp6a5e99->post('price') * 100); $sp484668 = $sp6a5e99->post('price_whole'); $sp770607 = @json_decode($sp484668, true); foreach ($sp770607 as $spaf1fcb) { if ($spaf1fcb[1] < 1 || $spaf1fcb[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $spefca14 = explode('|', System::_get('filter_words')); if (($sp6f1294 = Helper::filterWords($sp535158, $spefca14)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp6f1294); } if (($sp6f1294 = Helper::filterWords($sp97e2b2, $spefca14)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp6f1294); } if (($sp6f1294 = Helper::filterWords($sp8271f1, $spefca14)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp6f1294); } } if ((int) $sp6a5e99->post('id')) { $spdbee16 = $this->authQuery($sp6a5e99, \App\Product::class)->findOrFail($sp6a5e99->post('id')); if (\App\Card::whereProductId($spdbee16->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($sp3a3909 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($sp63b3eb !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } else { $spdbee16 = new \App\Product(); $spdbee16->count_sold = 0; $spdbee16->user_id = $this->getUserIdOrFail($sp6a5e99); } $spdbee16->category_id = $sp0e6d39; $spdbee16->name = $sp535158; $spcceaa1 = new AntiXSS(); $spdbee16->description = $spcceaa1->xss_clean($sp97e2b2); $spdbee16->instructions = $spcceaa1->xss_clean($sp8271f1); $spdbee16->sort = $sp6a5e99->post('sort'); $spdbee16->buy_min = $sp3a3909; $spdbee16->buy_max = $sp63b3eb; $spdbee16->count_warn = $sp6a5e99->post('count_warn'); $spdbee16->support_coupon = $sp6a5e99->post('support_coupon') === 'true'; $spdbee16->password = $sp6a5e99->post('password'); $spdbee16->password_open = $sp6a5e99->post('password_open') === 'true'; $spdbee16->cost = $sp152c6f; $spdbee16->price = $spcaf990; $spdbee16->price_whole = $sp484668; $spdbee16->enabled = (int) $sp6a5e99->post('enabled'); $spdbee16->inventory = (int) $sp6a5e99->post('inventory'); $spdbee16->saveOrFail(); return Response::success(); } function enable(Request $sp6a5e99) { $this->validate($sp6a5e99, array('ids' => 'required|string', 'enabled' => 'required|integer')); $spe7e110 = $sp6a5e99->post('ids'); $spcd92c8 = (int) $sp6a5e99->post('enabled'); $this->authQuery($sp6a5e99, \App\Product::class)->whereIn('id', explode(',', $spe7e110))->update(array('enabled' => $spcd92c8)); return Response::success(); } function delete(Request $sp6a5e99) { $this->validate($sp6a5e99, array('ids' => 'required|string')); $spe7e110 = $sp6a5e99->post('ids'); $spe7e110 = explode(',', $spe7e110); $spf55f55 = $this->authQuery($sp6a5e99, \App\Product::class)->whereIn('id', $spe7e110); $spf12fd2 = $this->authQuery($sp6a5e99, \App\Card::class)->whereIn('product_id', $spe7e110); return DB::transaction(function () use($spf55f55, $spf12fd2) { $spf55f55->delete(); $spf12fd2->forceDelete(); return Response::success(); }); } }