<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Product; use App\Library\Response; use App\Library\Pay\Pay as PayApi; use App\Library\Geetest; use App\Mail\OrderShipped; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Cookie; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spf631e6, $sp2346a9, $spdd589b, $sp0a27da, $sp698b95) { try { (new PayApi())->goPay($sp0a27da, $sp2346a9, $spdd589b, $spdd589b, $sp698b95); return self::renderResult($spf631e6, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sp019ea9) { return self::renderResult($spf631e6, array('msg' => $sp019ea9->getMessage())); } } function buy(Request $spf631e6) { if ((int) System::_get('vcode_shop_buy') === 1) { $sp567373 = Geetest\API::verify($spf631e6->input('geetest_challenge'), $spf631e6->input('geetest_validate'), $spf631e6->input('geetest_seccode')); if (!$sp567373) { return self::renderResult($spf631e6, array('msg' => '系统无法接受您的验证结果，请刷新页面后重试。')); } } $sp190603 = Cookie::get('customer'); if (strlen($sp190603) !== 32) { return self::renderResult($spf631e6, array('msg' => '请返回页面重新下单')); } $sp23531a = (int) $spf631e6->input('category_id'); $spa20daf = (int) $spf631e6->input('product_id'); $sp7548f9 = (int) $spf631e6->input('count'); $spbf61ef = $spf631e6->input('coupon'); $spe366e9 = $spf631e6->input('email'); $spd96048 = (int) $spf631e6->input('pay_id'); if (!$sp23531a || !$spa20daf) { return self::renderResult($spf631e6, array('msg' => '请选择商品')); } if (strlen($spe366e9) < 1) { return self::renderResult($spf631e6, array('msg' => '请输入邮箱')); } $spcf070f = Category::findOrFail($sp23531a); if ($spcf070f->password_open) { if ($spcf070f->password !== $spf631e6->input('category_password')) { return Response::fail('分类密码输入错误'); } } $sp69288e = Product::where('id', $spa20daf)->where('category_id', $sp23531a)->where('enabled', 1)->with(array('cards' => function (Relation $spe8afa9) { $spe8afa9->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($sp69288e == null || $sp69288e->user == null) { return self::renderResult($spf631e6, array('msg' => '该商品未找到，请重新选择')); } if ($sp69288e->password_open) { if ($sp69288e->password !== $spf631e6->input('product_password')) { return Response::fail('分类密码输入错误'); } } if ($sp7548f9 < $sp69288e->buy_min) { return self::renderResult($spf631e6, array('msg' => '该商品最少购买' . $sp69288e->buy_min . '件，请重新选择')); } if ($sp7548f9 > $sp69288e->buy_max) { return self::renderResult($spf631e6, array('msg' => '该商品限购' . $sp69288e->buy_max . '件，请重新选择')); } $sp69288e->setAttribute('count', count($sp69288e->cards) ? $sp69288e->cards[0]->count : 0); if ($sp69288e->count < $sp7548f9) { return self::renderResult($spf631e6, array('msg' => '该商品库存不足')); } $sp8f21c2 = \App\Pay::find($spd96048); if ($sp8f21c2 == null || !$sp8f21c2->enabled) { return self::renderResult($spf631e6, array('msg' => '支付方式未找到，请重新选择')); } $sp19676f = $sp69288e->price; if ($sp69288e->price_whole) { $sp389e59 = json_decode($sp69288e->price_whole, true); for ($sp218d20 = count($sp389e59) - 1; $sp218d20 >= 0; $sp218d20--) { if ($sp7548f9 >= (int) $sp389e59[$sp218d20][0]) { $sp19676f = (int) $sp389e59[$sp218d20][1]; break; } } } $sp902bad = $sp7548f9 * $sp19676f; $sp698b95 = $sp902bad; $spa98bcb = null; if ($sp69288e->support_coupon && strlen($spbf61ef) > 0) { $spe692ec = \App\Coupon::where('user_id', $sp69288e->user_id)->where('coupon', $spbf61ef)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($spe692ec as $spb91d1b) { if ($spb91d1b->category_id === -1 || $spb91d1b->category_id === $sp23531a && ($spb91d1b->product_id === -1 || $spb91d1b->product_id === $spa20daf)) { if ($spb91d1b->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp698b95 > $spb91d1b->discount_val) { $spa98bcb = $spb91d1b; $sp698b95 = $sp698b95 - $spb91d1b->discount_val; break; } if ($spb91d1b->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $spa98bcb = $spb91d1b; $sp698b95 = $sp698b95 - intval($sp698b95 * $spb91d1b->discount_val / 100); break; } } } } if ($spa98bcb) { $spa98bcb->status = \App\Coupon::STATUS_USED; $spa98bcb->count_used++; $spa98bcb->save(); } $sp419ae0 = (int) round($sp698b95 * $sp8f21c2->fee_system); $spb3e406 = $sp698b95 - $sp419ae0; $sp2346a9 = date('YmdHis') . str_random(5); while (\App\Order::whereOrderNo($sp2346a9)->exists()) { $sp2346a9 = date('YmdHis') . str_random(5); } \App\Order::insert(array('user_id' => $sp69288e->user_id, 'order_no' => $sp2346a9, 'product_id' => $spa20daf, 'count' => $sp7548f9, 'email' => $spe366e9, 'ip' => Helper::getIP(), 'customer' => $sp190603, 'email_sent' => false, 'cost' => $sp7548f9 * $sp69288e->cost, 'price' => $sp902bad, 'discount' => $sp902bad - $sp698b95, 'paid' => $sp698b95, 'pay_id' => $sp8f21c2->id, 'fee' => $sp419ae0, 'system_fee' => $sp419ae0, 'income' => $spb3e406, 'status' => \App\Order::STATUS_UNPAY, 'created_at' => Carbon::now())); $spdd589b = $sp2346a9; return $this->goPay($spf631e6, $sp2346a9, $spdd589b, $sp8f21c2, $sp698b95); } function pay(Request $spf631e6, $sp2346a9) { $sp09599a = \App\Order::whereOrderNo($sp2346a9)->first(); if ($sp09599a == null) { return self::renderResult($spf631e6, array('msg' => '订单未找到，请重试')); } if ($sp09599a->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp2346a9); } $spd7f781 = 'pay: ' . $sp09599a->pay_id; $sp0a27da = $sp09599a->pay; if (!$sp0a27da) { \Log::error($spd7f781 . ' cannot find Pay'); return $this->renderResult($spf631e6, array('msg' => '支付方式未找到')); } $spd7f781 .= ',' . $sp0a27da->driver; $spc6bf93 = json_decode($sp0a27da->config, true); $spc6bf93['payway'] = $sp0a27da->way; $spc6bf93['out_trade_no'] = $sp2346a9; try { $this->payApi = PayApi::getDriver($sp0a27da->id, $sp0a27da->driver); } catch (\Exception $sp019ea9) { \Log::error($spd7f781 . ' cannot find Driver: ' . $sp019ea9->getMessage()); return $this->renderResult($spf631e6, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($spc6bf93, function ($sp2346a9, $sp7ca622, $sp9fec61) use($spf631e6) { try { $this->shipOrder($spf631e6, $sp2346a9, $sp7ca622, $sp9fec61, FALSE); } catch (\Exception $sp019ea9) { $this->renderResult($spf631e6, array('success' => false, 'msg' => $sp019ea9->getMessage())); } })) { \Log::notice($spd7f781 . ' already success' . '

'); return redirect('/pay/result/' . $sp2346a9); } $sp69288e = Product::where('id', $sp09599a->product_id)->where('enabled', 1)->with(array('cards' => function (Relation $spe8afa9) { $spe8afa9->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($sp69288e == null) { return self::renderResult($spf631e6, array('msg' => '该商品已下架')); } $sp69288e->setAttribute('count', count($sp69288e->cards) ? $sp69288e->cards[0]->count : 0); if ($sp69288e->count < $sp09599a->count) { return self::renderResult($spf631e6, array('msg' => '该商品库存不足')); } $spdd589b = $sp2346a9; return $this->goPay($spf631e6, $sp2346a9, $spdd589b, $sp0a27da, $sp09599a->paid); } function qrcode(Request $spf631e6, $sp2346a9, $sp5eac7e) { $sp09599a = \App\Order::whereOrderNo($sp2346a9)->with('product')->first(); if ($sp09599a == null) { return self::renderResult($spf631e6, array('msg' => '订单未找到，请重试')); } if ($sp09599a->product_id !== \App\Product::ID_API && $sp09599a->product == null) { return self::renderResult($spf631e6, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp5eac7e, array('pay_id' => $sp09599a->pay_id, 'name' => $sp09599a->product_id === \App\Product::ID_API ? $sp09599a->api_out_no : $sp09599a->product->name, 'qrcode' => $spf631e6->get('url'), 'id' => $sp2346a9)); } function qrQuery(Request $spf631e6, $spd96048) { $spc89a41 = $spf631e6->input('id', ''); return self::payReturn($spf631e6, $spd96048, $spc89a41); } function payReturn(Request $spf631e6, $spd96048, $sp30c318 = '') { $spd7f781 = 'payReturn: ' . $spd96048; \Log::debug($spd7f781); $sp0a27da = \App\Pay::where('id', $spd96048)->first(); if (!$sp0a27da) { return $this->renderResult($spf631e6, array('success' => 0, 'msg' => '支付方式错误')); } $spd7f781 .= ',' . $sp0a27da->driver; if (strlen($sp30c318) > 0) { $sp09599a = \App\Order::whereOrderNo($sp30c318)->first(); if ($sp09599a && ($sp09599a->status === \App\Order::STATUS_PAID || $sp09599a->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($spd7f781 . ' already success' . '

'); if ($spf631e6->ajax()) { return self::renderResult($spf631e6, array('success' => 1, 'data' => '/pay/result/' . $sp30c318), array('order' => $sp09599a)); } else { return redirect('/pay/result/' . $sp30c318); } } } try { $this->payApi = PayApi::getDriver($sp0a27da->id, $sp0a27da->driver); } catch (\Exception $sp019ea9) { \Log::error($spd7f781 . ' cannot find Driver: ' . $sp019ea9->getMessage()); return $this->renderResult($spf631e6, array('success' => 0, 'msg' => '支付驱动未找到')); } $spc6bf93 = json_decode($sp0a27da->config, true); $spc6bf93['out_trade_no'] = $sp30c318; $spc6bf93['payway'] = $sp0a27da->way; \Log::debug($spd7f781 . ' will verify'); if ($this->payApi->verify($spc6bf93, function ($sp2346a9, $sp7ca622, $sp9fec61) use($spf631e6, $spd7f781, &$sp30c318) { $sp30c318 = $sp2346a9; try { \Log::debug($spd7f781 . " shipOrder start, order_no: {$sp2346a9}, amount: {$sp7ca622}, trade_no: {$sp9fec61}"); $this->shipOrder($spf631e6, $sp2346a9, $sp7ca622, $sp9fec61, FALSE); \Log::debug($spd7f781 . ' shipOrder end, order_no: ' . $sp2346a9); } catch (\Exception $sp019ea9) { \Log::error($spd7f781 . ' shipOrder Exception: ' . $sp019ea9->getMessage()); } })) { \Log::debug($spd7f781 . ' verify finished: 1' . '

'); if ($spf631e6->ajax()) { return self::renderResult($spf631e6, array('success' => 1, 'data' => '/pay/result/' . $sp30c318)); } else { return redirect('/pay/result/' . $sp30c318); } } else { \Log::debug($spd7f781 . ' verify finished: 0' . '

'); return $this->renderResult($spf631e6, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $spf631e6, $spd96048) { $spd7f781 = 'payNotify pay_id: ' . $spd96048; \Log::debug($spd7f781); $sp0a27da = \App\Pay::where('id', $spd96048)->first(); if (!$sp0a27da) { \Log::error($spd7f781 . ' cannot find PayModel'); echo 'fail'; die; } $spd7f781 .= ',' . $sp0a27da->driver; try { $this->payApi = PayApi::getDriver($sp0a27da->id, $sp0a27da->driver); } catch (\Exception $sp019ea9) { \Log::error($spd7f781 . ' cannot find Driver: ' . $sp019ea9->getMessage()); echo 'fail'; die; } $spc6bf93 = json_decode($sp0a27da->config, true); $spc6bf93['payway'] = $sp0a27da->way; $spc6bf93['isNotify'] = true; \Log::debug($spd7f781 . ' will verify'); $sp567373 = $this->payApi->verify($spc6bf93, function ($sp2346a9, $sp7ca622, $sp9fec61) use($spf631e6, $spd7f781) { try { \Log::debug($spd7f781 . " shipOrder start, order_no: {$sp2346a9}, amount: {$sp7ca622}, trade_no: {$sp9fec61}"); $this->shipOrder($spf631e6, $sp2346a9, $sp7ca622, $sp9fec61, FALSE); \Log::debug($spd7f781 . ' shipOrder end, order_no: ' . $sp2346a9); } catch (\Exception $sp019ea9) { \Log::error($spd7f781 . ' shipOrder Exception: ' . $sp019ea9->getMessage()); } }); \Log::debug($spd7f781 . ' notify finished: ' . (int) $sp567373 . '

'); die; } function result(Request $spf631e6, $sp2346a9) { $sp09599a = \App\Order::whereOrderNo($sp2346a9)->first(); if ($sp09599a == null) { return self::renderResult($spf631e6, array('msg' => '订单未找到，请重试')); } if ($sp09599a->status === \App\Order::STATUS_PAID) { $sp2ea07b = $sp09599a->user->qq; $spb18c75 = '商家库存不足，因此卡密没有自动发货，请联系商家客服发货'; if ($sp2ea07b) { $spb18c75 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp2ea07b . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $sp2ea07b . '</a>'; } return self::renderResult($spf631e6, array('success' => false, 'title' => '订单已支付', 'msg' => $spb18c75), array('order' => $sp09599a)); } elseif ($sp09599a->status === \App\Order::STATUS_SUCCESS) { return $this->shipOrder($spf631e6, $sp09599a->order_no, $sp09599a->paid, 0, TRUE); } return self::renderResult($spf631e6, array('success' => false, 'msg' => $sp09599a->remark ? '失败原因:<br>' . $sp09599a->remark : '订单支付失败，请重试'), array('order' => $sp09599a)); } function renderResult(Request $spf631e6, $spe62cd8, $spe908e8 = array()) { if ($spf631e6->ajax()) { if (@$spe62cd8['success']) { return Response::success($spe62cd8['data']); } else { return Response::fail('error', $spe62cd8['msg']); } } else { return view('pay.result', array_merge(array('result' => $spe62cd8, 'data' => $spe908e8), $spe908e8)); } } function shipOrder($spf631e6, $sp2346a9, $sp7ca622, $sp9fec61, $sp1bb59b = true) { $sp09599a = \App\Order::whereOrderNo($sp2346a9)->first(); if ($sp09599a === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $sp2346a9 . ',trade_no:' . $sp9fec61 . ',amount:' . $sp7ca622 . ']. die(\'success\');'); die('success'); } if ($sp09599a->paid > $sp7ca622) { \Log::alert('shipOrder, price may error, order_no:' . $sp2346a9 . ', paid:' . $sp09599a->paid . ', $amount get:' . $sp7ca622); $sp09599a->remark = '支付金额(' . sprintf('%0.2f', $sp7ca622 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp09599a->paid / 100) . ')'; $sp09599a->save(); throw new \Exception($sp09599a->remark); } $sp712040 = array(); $sp5f1152 = '订单#' . $sp2346a9 . '&nbsp;已支付，卡号列表：'; $sp7fc74d = ''; $sp69288e = null; $sp2f213c = $sp09599a->status === \App\Order::STATUS_UNPAY; $spa459ef = $sp2f213c && System::_getInt('mail_send_order') === 1 && filter_var($sp09599a->email, FILTER_VALIDATE_EMAIL); if ($sp2f213c) { \Log::debug('shipOrder.first_process:' . $sp2346a9); $spf21967 = $sp09599a->id; if (FundHelper::orderSuccess($sp09599a, function () use($spf21967, $sp9fec61, &$sp712040, &$sp7fc74d) { $sp09599a = \App\Order::where('id', $spf21967)->lockForUpdate()->firstOrFail(); if ($sp09599a->status !== \App\Order::STATUS_UNPAY) { \Log::debug('shipOrder.first_process:' . $sp09599a->order_no . ' already processed!'); return -999; } $sp69288e = $sp09599a->product()->lockForUpdate()->firstOrFail(); $sp69288e->count_sold += $sp09599a->count; $sp69288e->saveOrFail(); $sp09599a->pay_trade_no = $sp9fec61; $sp09599a->paid_at = Carbon::now(); $sp712040 = Card::where('product_id', $sp09599a->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp09599a->count)->lockForUpdate()->get(); if (count($sp712040) !== $sp09599a->count) { \Log::alert('订单:' . $sp09599a->order_no . ', 购买数量:' . $sp09599a->count . ', 卡数量:' . count($sp712040) . ' 卡密不足(已支付 未发货)'); $sp09599a->status = \App\Order::STATUS_PAID; $sp09599a->saveOrFail(); return \App\Order::STATUS_PAID; } else { $sp09599a->status = \App\Order::STATUS_SUCCESS; $sp09599a->saveOrFail(); $spe3785f = array(); foreach ($sp712040 as $sp29cfbd) { $sp7fc74d .= $sp29cfbd->card . '<br>'; $spe3785f[] = $sp29cfbd->id; } $sp09599a->cards()->attach($spe3785f); Card::whereIn('id', $spe3785f)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => \DB::raw('`count_sold`+1'))); return \App\Order::STATUS_SUCCESS; } })) { $sp69288e = Product::where('id', $sp09599a->product_id)->with(array('cards' => function (Relation $spe8afa9) { $spe8afa9->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($sp69288e) { $sp7548f9 = count($sp69288e->cards) ? $sp69288e->cards[0]->count : 0; $sp69288e->setAttribute('count', $sp7548f9); if ($sp69288e->count_warn > 0 && $sp7548f9 < $sp69288e->count_warn) { try { \Mail::to($sp09599a->user->email)->Queue(new ProductCountWarn($sp69288e, $sp7548f9)); } catch (\Exception $sp019ea9) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('shipOrder.count_warn error, product_id:' . $sp09599a->product_id . ', email:' . $sp09599a->user->email . ', Exception:' . $sp019ea9); \App\Library\LogHelper::setLogFile('card'); } } } } else { \Log::error('shipOrder.first_process error, order_no:' . $sp2346a9 . ',trade_no:' . $sp9fec61); throw new \Exception('merchant operate exception!'); } } elseif ($sp1bb59b) { $sp712040 = $sp09599a->cards; $sp69288e = $sp09599a->product; foreach ($sp712040 as $sp29cfbd) { $sp7fc74d .= $sp29cfbd->card . '
'; } } if ($sp1bb59b || $spa459ef) { if (count($sp712040) < $sp09599a->count) { if (count($sp712040)) { $sp5f1152 = '目前库存不足，您还有' . ($sp09599a->count - count($sp712040)) . '张卡密未发货，请联系商家客服发货<br>已发货卡密见下方：<br>'; } else { $sp5f1152 = '目前库存不足，您购买的' . ($sp09599a->count - count($sp712040)) . '张卡密未发货，请联系商家客服发货<br>'; } $sp2ea07b = $sp09599a->user->qq; if ($sp2ea07b) { $sp5f1152 .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp2ea07b . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $sp2ea07b . '</a><br>'; } } } if ($spa459ef) { $spd34b05 = str_replace('
', '<br>', $sp7fc74d); try { \Mail::to($sp09599a->email)->Queue(new OrderShipped($sp09599a, $sp5f1152, $spd34b05)); $sp09599a->email_sent = true; $sp09599a->saveOrFail(); } catch (\Exception $sp019ea9) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('shipOrder.need_mail error, order_no:' . $sp2346a9 . ', email:' . $sp09599a->email . ', cards:' . $spd34b05 . ', Exception:' . $sp019ea9->getMessage()); \App\Library\LogHelper::setLogFile('card'); } } if ($sp1bb59b) { return self::renderResult($spf631e6, array('success' => true, 'msg' => $sp5f1152), array('card_txt' => $sp7fc74d, 'order' => $sp09599a, 'product' => $sp69288e)); } return FALSE; } }