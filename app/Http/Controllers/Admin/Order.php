<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { function stat(Request $sp6a5e99) { $this->validate($sp6a5e99, array('day' => 'required|integer|between:7,30')); $sp73a9ec = (int) $sp6a5e99->input('day'); if ($sp73a9ec === 30) { $spf5de88 = Carbon::now()->addMonths(-1); } else { $spf5de88 = Carbon::now()->addDays(-$sp73a9ec); } $sp7a245d = \App\Order::where(function ($sp7a245d) { $sp7a245d->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$sp73a9ec + 1))->groupBy('date')->orderBy('date', 'DESC'); $sp7a245d->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`fee`-`system_fee`) as "profit"'); $sp00e9d2 = $sp7a245d->get()->toArray(); $sp6f1294 = array(); foreach ($sp00e9d2 as $sp1b8ac8) { $sp6f1294[$sp1b8ac8['date']] = array((int) $sp1b8ac8['count'], (int) $sp1b8ac8['paid'], (int) $sp1b8ac8['profit']); } return Response::success($sp6f1294); } public function delete(Request $sp6a5e99) { $this->validate($sp6a5e99, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $spe7e110 = $sp6a5e99->post('ids'); $spc3d292 = (int) $sp6a5e99->post('income'); $sp82bc12 = (int) $sp6a5e99->post('balance'); \App\Order::whereIn('id', explode(',', $spe7e110))->chunk(100, function ($sp9cbaab) use($spc3d292, $sp82bc12) { foreach ($sp9cbaab as $sp61541f) { $sp61541f->cards()->detach(); try { if ($spc3d292) { $sp61541f->fundRecord()->delete(); } if ($sp82bc12) { $sp2b1668 = \App\User::lockForUpdate()->firstOrFail(); $sp2b1668->m_all -= $sp61541f->income; $sp2b1668->saveOrFail(); } $sp61541f->delete(); } catch (\Exception $spbcc446) { } } }); return Response::success(); } function freeze(Request $sp6a5e99) { $this->validate($sp6a5e99, array('ids' => 'required|string')); $spe7e110 = explode(',', $sp6a5e99->post('ids')); $spee117f = $sp6a5e99->post('reason'); $sp8e7e1d = 0; $spdac212 = 0; foreach ($spe7e110 as $spea8d79) { $sp8e7e1d++; if (FundHelper::orderFreeze($spea8d79, $spee117f)) { $spdac212++; } } return Response::success(array($sp8e7e1d, $spdac212)); } function unfreeze(Request $sp6a5e99) { $this->validate($sp6a5e99, array('ids' => 'required|string')); $spe7e110 = explode(',', $sp6a5e99->post('ids')); $sp8e7e1d = 0; $spdac212 = 0; $sp336c9d = \App\Order::STATUS_FROZEN; foreach ($spe7e110 as $spea8d79) { $sp8e7e1d++; if (FundHelper::orderUnfreeze($spea8d79, '后台操作', null, $sp336c9d)) { $spdac212++; } } return Response::success(array($sp8e7e1d, $spdac212, $sp336c9d)); } function set_paid(Request $sp6a5e99) { $this->validate($sp6a5e99, array('id' => 'required|integer')); $sp5d3f49 = $sp6a5e99->post('id', ''); $sp040923 = $sp6a5e99->post('trade_no', ''); if (strlen($sp040923) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp61541f = \App\Order::findOrFail($sp5d3f49); if ($sp61541f->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp0e4eec = 'Admin.SetPaid'; $sp51ee1d = $sp61541f->order_no; $sp7918ab = $sp61541f->paid; try { Log::debug($sp0e4eec . " shipOrder start, order_no: {$sp51ee1d}, amount: {$sp7918ab}, trade_no: {$sp040923}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp6a5e99, $sp51ee1d, $sp7918ab, $sp040923); Log::debug($sp0e4eec . ' shipOrder end, order_no: ' . $sp51ee1d); $spdac212 = true; $sp3a6f3c = '发货成功'; } catch (\Exception $spbcc446) { $spdac212 = false; $sp3a6f3c = $spbcc446->getMessage(); Log::error($sp0e4eec . ' shipOrder Exception: ' . $spbcc446->getMessage()); } $sp61541f = \App\Order::with(array('card_orders.card' => function (Relation $sp7a245d) { $sp7a245d->select(array('id', 'card')); }))->findOrFail($sp5d3f49); if ($sp61541f->status === \App\Order::STATUS_PAID) { $spdac212 = false; $sp3a6f3c = '已标记为付款成功, 但是买家库存不足, 发货失败, 请稍后尝试手动发货'; } return Response::success(array('code' => $spdac212 ? 0 : -1, 'msg' => $sp3a6f3c, 'order' => $sp61541f)); } }