<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { function stat(Request $spf631e6) { $spe6a0a5 = (int) $spf631e6->input('day', 7); $spb58893 = $spf631e6->post('profit') === 'true'; $spe8afa9 = \App\Order::where(function ($spe8afa9) { $spe8afa9->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$spe6a0a5 + 1))->groupBy('date')->orderBy('date', 'DESC'); if ($spb58893) { $spe8afa9->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`fee`-`system_fee`) as "sum"'); } else { $spe8afa9->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "sum"'); } $sp3562f5 = $spe8afa9->get()->toArray(); $sp567373 = array(); foreach ($sp3562f5 as $spe1403c) { $sp567373[$spe1403c['date']] = array((int) $spe1403c['count'], (int) $spe1403c['sum']); } return Response::success($sp567373); } public function delete(Request $spf631e6) { $sp398578 = $spf631e6->post('ids', ''); $spd6dd9f = (int) $spf631e6->post('income'); $spff2ffd = (int) $spf631e6->post('balance'); if (strlen($sp398578) < 1) { return Response::forbidden(); } \App\Order::whereIn('id', explode(',', $sp398578))->chunk(100, function ($sp0868db) use($spd6dd9f, $spff2ffd) { foreach ($sp0868db as $sp09599a) { $sp09599a->cards()->detach(); try { if ($spd6dd9f) { $sp09599a->fundRecord()->delete(); } if ($spff2ffd) { $sp5b5487 = \App\User::lockForUpdate()->firstOrFail(); $sp5b5487->m_all -= $sp09599a->income; $sp5b5487->saveOrFail(); } $sp09599a->delete(); } catch (\Exception $sp019ea9) { } } }); return Response::success(); } function freeze(Request $spf631e6) { $sp398578 = $spf631e6->post('ids', ''); if (strlen($sp398578) < 1) { return Response::forbidden(); } $sp73594d = $spf631e6->post('reason'); $sp0868db = \App\Order::whereIn('id', explode(',', $sp398578))->where('status', \App\Order::STATUS_SUCCESS)->get(); $sp7548f9 = 0; $spe95d32 = 0; foreach ($sp0868db as $sp09599a) { if (FundHelper::orderFreeze($sp09599a, $sp73594d)) { $spe95d32++; } $sp7548f9++; } return Response::success(array($sp7548f9, $spe95d32)); } function unfreeze(Request $spf631e6) { $sp398578 = $spf631e6->post('ids', ''); if (strlen($sp398578) < 1) { return Response::forbidden(); } $sp0868db = \App\Order::whereIn('id', explode(',', $sp398578))->where('status', \App\Order::STATUS_FROZEN)->get(); $sp7548f9 = 0; $spe95d32 = 0; $spcf8eb1 = \App\Order::STATUS_FROZEN; foreach ($sp0868db as $sp09599a) { if (FundHelper::orderUnfreeze($sp09599a, '后台操作', null, $spcf8eb1)) { $spe95d32++; } $sp7548f9++; } return Response::success(array($sp7548f9, $spe95d32, $spcf8eb1)); } function set_paid(Request $spf631e6) { $spcbbf66 = (int) $spf631e6->post('id', ''); if ($spcbbf66 < 1) { return Response::forbidden(); } $sp9fec61 = $spf631e6->post('trade_no', ''); if (strlen($sp9fec61) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp09599a = \App\Order::findOrFail($spcbbf66); if ($sp09599a->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $spd7f781 = 'Admin.SetPaid'; $sp2346a9 = $sp09599a->order_no; $sp7ca622 = $sp09599a->paid; try { Log::debug($spd7f781 . " shipOrder start, order_no: {$sp2346a9}, amount: {$sp7ca622}, trade_no: {$sp9fec61}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spf631e6, $sp2346a9, $sp7ca622, $sp9fec61, FALSE); Log::debug($spd7f781 . ' shipOrder end, order_no: ' . $sp2346a9); $spe95d32 = true; $spb18c75 = '发货成功'; } catch (\Exception $sp019ea9) { $spe95d32 = false; $spb18c75 = $sp019ea9->getMessage(); Log::error($spd7f781 . ' shipOrder Exception: ' . $sp019ea9->getMessage()); } $sp09599a = \App\Order::with(array('card_orders.card' => function (Relation $spe8afa9) { $spe8afa9->select(array('id', 'card')); }))->findOrFail($spcbbf66); if ($sp09599a->status === \App\Order::STATUS_PAID) { $spe95d32 = false; $spb18c75 = '已标记为付款成功, 但是买家库存不足, 发货失败, 请稍后尝试手动发货'; } return Response::success(array('code' => $spe95d32 ? 0 : -1, 'msg' => $spb18c75, 'order' => $sp09599a)); } }