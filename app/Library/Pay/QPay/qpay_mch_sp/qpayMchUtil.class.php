<?php
require_once 'qpayMch.config.php'; class QpayMchUtil { public static function createNoncestr($sp4d881e = 32) { $spb7853e = 'abcdefghijklmnopqrstuvwxyz0123456789'; $sp512d95 = ''; for ($spf69b52 = 0; $spf69b52 < $sp4d881e; $spf69b52++) { $sp512d95 .= substr($spb7853e, mt_rand(0, strlen($spb7853e) - 1), 1); } return $sp512d95; } public static function buildQueryStr($sp7c7a93) { $sp519df3 = array(); foreach ($sp7c7a93 as $spc57c89 => $sp2a00a3) { if ($spc57c89 != 'sign' && $sp2a00a3 != '' && !is_array($sp2a00a3)) { array_push($sp519df3, "{$spc57c89}={$sp2a00a3}"); } } return implode('&', $sp519df3); } public static function getSign($sp7c7a93, $spc7e702) { ksort($sp7c7a93); $spd76ade = QpayMchUtil::buildQueryStr($sp7c7a93); $spd76ade = $spd76ade . '&key=' . $spc7e702; $spd76ade = md5($spd76ade); $sp1e1df1 = strtoupper($spd76ade); return $sp1e1df1; } public static function arrayToXml($sp3ff5f0) { $spa65db2 = '<xml>'; foreach ($sp3ff5f0 as $sp1e4b49 => $sp7a0550) { if (is_numeric($sp7a0550)) { $spa65db2 .= "<{$sp1e4b49}>{$sp7a0550}</{$sp1e4b49}>"; } else { $spa65db2 .= "<{$sp1e4b49}><![CDATA[{$sp7a0550}]]></{$sp1e4b49}>"; } } $spa65db2 .= '</xml>'; return $spa65db2; } public static function xmlToArray($spa65db2) { $sp3ff5f0 = json_decode(json_encode(simplexml_load_string($spa65db2, 'SimpleXMLElement', LIBXML_NOCDATA)), true); return $sp3ff5f0; } public static function reqByCurlNormalPost($sp7c7a93, $sp59c732, $spafc194 = 10) { return QpayMchUtil::_reqByCurl($sp7c7a93, $sp59c732, $spafc194, false); } public static function reqByCurlSSLPost($sp7c7a93, $sp59c732, $spafc194 = 10) { return QpayMchUtil::_reqByCurl($sp7c7a93, $sp59c732, $spafc194, true); } private static function _reqByCurl($sp7c7a93, $sp59c732, $spafc194 = 10, $sp8100da = false) { $sp72f257 = curl_init(); curl_setopt($sp72f257, CURLOPT_URL, $sp59c732); curl_setopt($sp72f257, CURLOPT_TIMEOUT, $spafc194); curl_setopt($sp72f257, CURLOPT_SSL_VERIFYPEER, FALSE); curl_setopt($sp72f257, CURLOPT_SSL_VERIFYHOST, FALSE); curl_setopt($sp72f257, CURLOPT_HEADER, FALSE); curl_setopt($sp72f257, CURLOPT_RETURNTRANSFER, TRUE); if (isset($sp8100da) && $sp8100da != false) { curl_setopt($sp72f257, CURLOPT_SSLCERTTYPE, 'PEM'); curl_setopt($sp72f257, CURLOPT_SSLCERT, QpayMchConf::CERT_FILE_PATH); curl_setopt($sp72f257, CURLOPT_SSLKEYTYPE, 'PEM'); curl_setopt($sp72f257, CURLOPT_SSLKEY, QpayMchConf::KEY_FILE_PATH); } curl_setopt($sp72f257, CURLOPT_POST, true); curl_setopt($sp72f257, CURLOPT_POSTFIELDS, $sp7c7a93); $sp6f1294 = curl_exec($sp72f257); if ($sp6f1294) { curl_close($sp72f257); return $sp6f1294; } else { $sp827b09 = curl_errno($sp72f257); print_r($sp827b09); curl_close($sp72f257); return false; } } }