<?php
namespace App\Library\Pay\Alipay; use App\Library\Pay\ApiInterface; class Api implements ApiInterface { private $url_notify = ''; private $url_return = ''; private $pay_id; public function __construct($spcbbf66) { $this->url_notify = SYS_URL_API . '/pay/notify/' . $spcbbf66; $this->url_return = SYS_URL . '/pay/return/' . $spcbbf66; $this->pay_id = $spcbbf66; } function goPay($spc6bf93, $sp30c318, $spc3fe8b, $sp66faf9, $spb959ec) { $sp7ca622 = sprintf('%.2f', $spb959ec / 100); $sp6e4d76 = $this->buildAliConfig($spc6bf93); require_once __DIR__ . '/lib/alipay_submit.class.php'; $sp6e4d76['notify_url'] = $this->url_notify; $sp6e4d76['return_url'] = $this->url_return . '/' . $sp30c318; $spf88b18 = array('service' => $sp6e4d76['service'], 'partner' => $sp6e4d76['partner'], 'seller_id' => $sp6e4d76['seller_id'], 'payment_type' => $sp6e4d76['payment_type'], 'notify_url' => $sp6e4d76['notify_url'], 'return_url' => $sp6e4d76['return_url'], 'out_trade_no' => $sp30c318, 'total_fee' => $sp7ca622, 'subject' => $spc3fe8b, 'body' => $sp66faf9, '_input_charset' => 'utf-8', 'anti_phishing_key' => $sp6e4d76['anti_phishing_key'], 'exter_invoke_ip' => $sp6e4d76['exter_invoke_ip']); $spac156f = new \AlipaySubmit($sp6e4d76); $spd3fa86 = $spac156f->buildRequestForm($spf88b18, 'get', '确认'); echo '<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>正在跳转到支付渠道...</title></head><body><h1 style="text-align: center">正在跳转到支付渠道...</h1>'; echo $spd3fa86; } function verify($spc6bf93, $spc5d9aa) { $sp4dcba6 = isset($spc6bf93['isNotify']) && $spc6bf93['isNotify']; $sp6e4d76 = $this->buildAliConfig($spc6bf93); require __DIR__ . '/lib/alipay_notify.class.php'; $sp20d1b1 = new \AlipayNotify($sp6e4d76); if ($sp4dcba6) { $spe62cd8 = $sp20d1b1->verifyNotify(); } else { $spe62cd8 = $sp20d1b1->verifyReturn(); } if ($spe62cd8) { $sp30c318 = $_REQUEST['out_trade_no']; $sp9fec61 = $_REQUEST['trade_no']; $sp445149 = $_REQUEST['trade_status']; $sp51db0b = (int) ($_REQUEST['total_fee'] * 100); if ($sp445149 == 'TRADE_FINISHED' || $sp445149 == 'TRADE_SUCCESS') { $spc5d9aa($sp30c318, $sp51db0b, $sp9fec61); } if ($sp4dcba6) { echo 'success'; } return true; } else { if ($sp4dcba6) { echo 'fail'; $spd7f781 = 'payNotify pay_id: ' . $this->pay_id . ',Alipay'; } else { $spd7f781 = 'payReturn pay_id: ' . $this->pay_id . ',Alipay'; } \Log::error($spd7f781 . ' Alipay.Api.verify failed'); return false; } } private function buildAliConfig($spc6bf93) { return array('partner' => $spc6bf93['partner'], 'seller_id' => $spc6bf93['partner'], 'key' => $spc6bf93['key'], 'sign_type' => 'MD5', 'input_charset' => 'utf-8', 'cacert' => __DIR__ . DIRECTORY_SEPARATOR . 'cacert.pem', 'transport' => 'https', 'payment_type' => '1', 'service' => 'create_direct_pay_by_user', 'anti_phishing_key' => '', 'exter_invoke_ip' => ''); } }